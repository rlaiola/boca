---
#========================================================================
# Copyright Universidade Federal do Espirito Santo (Ufes)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# 
# This program is released under license GNU GPL v3+ license.
#
#========================================================================

services:

    # ldap server
    ldap:
        image: osixia/openldap:1.3.0
        container_name: ldap
        volumes:
            - ./data.ldif:/container/service/slapd/assets/config/bootstrap/ldif/custom/data.ldif
        # command: --copy-service -l debug
        command: --copy-service
        environment: 
            LDAP_ORGANISATION: 'DI'
            LDAP_DOMAIN: 'inf.ufes.br'
            LDAP_BASE_DN: 'dc=inf,dc=ufes,dc=br'
            LDAP_ADMIN_PASSWORD: 'ldappw'
            TZ: America/Sao_Paulo
        ports:
            - 389:389

    # ldap account manager
    lam:
        image: ldapaccountmanager/lam:stable
        container_name: lam
        ports:
            - 8081:80
        environment: 
            LDAP_DOMAIN: 'inf.ufes.br'
            LDAP_BASE_DN: 'dc=inf,dc=ufes,dc=br'
            LDAP_SERVER: 'ldap://ldap:389'
            LDAP_USER: 'cn=admin,dc=inf,dc=ufes,dc=br'
            LAM_PASSWORD: 'ldappw'
            LDAP_ADMIN_PASSWORD: 'ldappw'
            LDAP_ORGANISATION: 'DI'
            TZ: America/Sao_Paulo
        depends_on:
            - ldap

    # web app
    boca-web:
        image: ghcr.io/rlaiola/boca-docker/boca-web:nightly
        depends_on:
            - boca-db
        environment:
            # database configuration
            # privileged user password
            - BOCA_DB_SUPER_PASSWORD=superpass
            #######################
            # authorization setup
            #######################
            # specifies the authentication method to use. The possible choices
            # are summarized below (if unspecified then password authentication
            # is used):
            #  - password: require the user to supply a password
            #  - ldap: authenticate using a LDAP server
            #  - google: authenticate using a Google account
            - BOCA_AUTH_METHOD=password
            # specifies custom BOCA users. If unspecified then considers the
            # default system and admin, which use the default authentication
            # method (password).
            # - BOCA_SYSTEM_USER=professorum
            # - BOCA_ADMIN_USER=professordois
            # defines a list of comma-separated users that will authenticate
            # using the default method (password). They will not be created
            # automatically, unless are the same used in the BOCA_SYSTEM_USER
            # or BOCA_ADMIN_USER env variables.
            - BOCA_LOCAL_USERS=system,admin,aluno
            # configuration options for LDAP authentication
            # example 1: passing LDAP env vars directly in docker-compose.
            - LDAP_SERVER=ldap://ldap:389
            - LDAP_BASE_DN=dc=inf,dc=ufes,dc=br
            - LDAP_USER=cn=admin,dc=inf,dc=ufes,dc=br
            - LDAP_PASSWORD=ldappw
            #######################
            # ui setup
            #######################
            # specifies whether team users can visualize their runs.
            # default: false
            - BOCA_ENABLE_VIEW_RUNS=true
        # example 2: passing LDAP env vars from file.
        # env_file:
        #     - .env.ldap
        volumes:
            - ./src/index.php:/var/www/boca/src/index.php
        ports:
            - 8000:80

    # online judge
    boca-jail:
        image: ghcr.io/joaofazolo/boca-docker/boca-jail:latest
        privileged: true
        depends_on:
            - boca-db

    # database
    boca-db:
        image: postgres:14-alpine
        environment:
            # database configuration
            # privileged user password
            - POSTGRES_PASSWORD=superpass

    # backup service
    boca-backup:
        image: postgres:14-alpine
        environment:
            - BOCA_DB_HOST=boca-db
            - BOCA_DB_SUPER_USER=postgres
            - BOCA_DB_SUPER_PASSWORD=superpass
            - BOCA_DB_NAME=bocadb
            # specifies the format of the archive file. It can be:
            # 1. plain text SQL backup (does not work with pg_restore)
            # - BOCA_DB_DUMP_FORMAT=p
            # 2. custom backup (compressed by default and most likely the best
            # option to use for creating the backup)
            - BOCA_DB_DUMP_FORMAT=c
            # 3. directory backup (compressed by default)
            # - BOCA_DB_DUMP_FORMAT=d
            # 4. tar backup (does not support compression)
            # - BOCA_DB_DUMP_FORMAT=t
            # Specifies the location of the target archive file (or directory,
            # for a directory-format archive) in which the data will be saved.
            # - BOCA_DB_DUMP_FILENAME=/out/boca-db.sql
            - BOCA_DB_DUMP_FILENAME=/out/boca-db.dump
            # - BOCA_DB_DUMP_FILENAME=/out/boca-db-dir
            # - BOCA_DB_DUMP_FILENAME=/out/boca-db.tar
        volumes:
            # folder in which the backups will be save
            - ./backups:/out
        command:
            - bash
            - -c
            - |
                export PGPASSWORD="$$BOCA_DB_SUPER_PASSWORD"
                pg_dump \
                    -h "$$BOCA_DB_HOST" \
                    -U "$$BOCA_DB_SUPER_USER" \
                    -F "$$BOCA_DB_DUMP_FORMAT" \
                    --clean --create \
                    -f "$$BOCA_DB_DUMP_FILENAME" \
                    "$$BOCA_DB_NAME"
        depends_on:
            - boca-db
        profiles:
            - backup

    # restore service
    boca-restore:
        image: postgres:16-alpine
        environment:
            - BOCA_DB_HOST=boca-db
            - BOCA_DB_PORT=5432
            - BOCA_DB_SUPER_USER=postgres
            - BOCA_DB_SUPER_PASSWORD=superpass
            - BOCA_DB_NAME=bocadb
            # specifies the location of the archive file (or directory, for
            # a directory-format archive) to be restored.
            # 1. plain text SQL restore (does not work with pg_restore)
            # 2. custom restore
            - BOCA_DB_DUMP_FILENAME=/in/boca-db.dump
            # 3. directory restore
            # - BOCA_DB_DUMP_FILENAME=/in/boca-db-dir/
            # 4. tar restore
            # - BOCA_DB_DUMP_FILENAME=/in/boca-db.tar
        volumes:
            # folder containing the archive file (or directory) to be restored
            - ./backups:/in
        command:
            - bash 
            - -c
            - |
                export PGPASSWORD="$$BOCA_DB_SUPER_PASSWORD"
                if [[ -f "$$BOCA_DB_DUMP_FILENAME" ]] || \
                   [[ -d "$$BOCA_DB_DUMP_FILENAME" ]];
                then
                    pg_restore \
                        -h "$$BOCA_DB_HOST" \
                        -p "$$BOCA_DB_PORT" \
                        -U "$$BOCA_DB_SUPER_USER" \
                        -d "$$BOCA_DB_NAME" \
                        -c "$$BOCA_DB_DUMP_FILENAME"
                fi
        depends_on:
            - boca-db
        profiles:
            - restore
